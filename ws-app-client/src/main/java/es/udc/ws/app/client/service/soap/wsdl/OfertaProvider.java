
package es.udc.ws.app.client.service.soap.wsdl;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "OfertaProvider", targetNamespace = "http://soap.ws.udc.es/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface OfertaProvider {


    /**
     * 
     * @param ofertaDto
     * @return
     *     returns es.udc.ws.app.client.service.soap.wsdl.OfertaDto
     * @throws SoapReclamacionAnteriorReservaException
     * @throws SoapInputValidationException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "annadirOferta", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.AnnadirOferta")
    @ResponseWrapper(localName = "annadirOfertaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.AnnadirOfertaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertaProvider/annadirOfertaRequest", output = "http://soap.ws.udc.es/OfertaProvider/annadirOfertaResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/OfertaProvider/annadirOferta/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapReclamacionAnteriorReservaException.class, value = "http://soap.ws.udc.es/OfertaProvider/annadirOferta/Fault/SoapReclamacionAnteriorReservaException")
    })
    public OfertaDto annadirOferta(
        @WebParam(name = "ofertaDto", targetNamespace = "")
        OfertaDto ofertaDto)
        throws SoapInputValidationException, SoapReclamacionAnteriorReservaException
    ;

    /**
     * 
     * @param ofertaDto
     * @throws SoapReclamacionAnteriorReservaException
     * @throws SoapInstanceNotFoundException
     * @throws SoapPrecioInvalidoException
     * @throws SoapFechaInvalidaException
     * @throws SoapInputValidationException
     */
    @WebMethod
    @RequestWrapper(localName = "actualizarOferta", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ActualizarOferta")
    @ResponseWrapper(localName = "actualizarOfertaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ActualizarOfertaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertaProvider/actualizarOfertaRequest", output = "http://soap.ws.udc.es/OfertaProvider/actualizarOfertaResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/OfertaProvider/actualizarOferta/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertaProvider/actualizarOferta/Fault/SoapInstanceNotFoundException"),
        @FaultAction(className = SoapFechaInvalidaException.class, value = "http://soap.ws.udc.es/OfertaProvider/actualizarOferta/Fault/SoapFechaInvalidaException"),
        @FaultAction(className = SoapPrecioInvalidoException.class, value = "http://soap.ws.udc.es/OfertaProvider/actualizarOferta/Fault/SoapPrecioInvalidoException"),
        @FaultAction(className = SoapReclamacionAnteriorReservaException.class, value = "http://soap.ws.udc.es/OfertaProvider/actualizarOferta/Fault/SoapReclamacionAnteriorReservaException")
    })
    public void actualizarOferta(
        @WebParam(name = "ofertaDto", targetNamespace = "")
        OfertaDto ofertaDto)
        throws SoapFechaInvalidaException, SoapInputValidationException, SoapInstanceNotFoundException, SoapPrecioInvalidoException, SoapReclamacionAnteriorReservaException
    ;

    /**
     * 
     * @param idOferta
     * @throws SoapInstanceNotFoundException
     * @throws SoapOfertaYaInvalidadaException
     * @throws SoapInputValidationException
     */
    @WebMethod
    @RequestWrapper(localName = "invalidarOferta", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.InvalidarOferta")
    @ResponseWrapper(localName = "invalidarOfertaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.InvalidarOfertaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertaProvider/invalidarOfertaRequest", output = "http://soap.ws.udc.es/OfertaProvider/invalidarOfertaResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/OfertaProvider/invalidarOferta/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertaProvider/invalidarOferta/Fault/SoapInstanceNotFoundException"),
        @FaultAction(className = SoapOfertaYaInvalidadaException.class, value = "http://soap.ws.udc.es/OfertaProvider/invalidarOferta/Fault/SoapOfertaYaInvalidadaException")
    })
    public void invalidarOferta(
        @WebParam(name = "idOferta", targetNamespace = "")
        Long idOferta)
        throws SoapInputValidationException, SoapInstanceNotFoundException, SoapOfertaYaInvalidadaException
    ;

    /**
     * 
     * @param idOferta
     * @throws SoapInstanceNotFoundException
     * @throws SoapInputValidationException
     * @throws SoapHayReservasException
     */
    @WebMethod
    @RequestWrapper(localName = "borrarOferta", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BorrarOferta")
    @ResponseWrapper(localName = "borrarOfertaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BorrarOfertaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertaProvider/borrarOfertaRequest", output = "http://soap.ws.udc.es/OfertaProvider/borrarOfertaResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/OfertaProvider/borrarOferta/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertaProvider/borrarOferta/Fault/SoapInstanceNotFoundException"),
        @FaultAction(className = SoapHayReservasException.class, value = "http://soap.ws.udc.es/OfertaProvider/borrarOferta/Fault/SoapHayReservasException")
    })
    public void borrarOferta(
        @WebParam(name = "idOferta", targetNamespace = "")
        Long idOferta)
        throws SoapHayReservasException, SoapInputValidationException, SoapInstanceNotFoundException
    ;

    /**
     * 
     * @param idOferta
     * @return
     *     returns es.udc.ws.app.client.service.soap.wsdl.OfertaDto
     * @throws SoapInstanceNotFoundException
     * @throws SoapInputValidationException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "buscarOfertaID", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarOfertaID")
    @ResponseWrapper(localName = "buscarOfertaIDResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarOfertaIDResponse")
    @Action(input = "http://soap.ws.udc.es/OfertaProvider/buscarOfertaIDRequest", output = "http://soap.ws.udc.es/OfertaProvider/buscarOfertaIDResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/OfertaProvider/buscarOfertaID/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertaProvider/buscarOfertaID/Fault/SoapInstanceNotFoundException")
    })
    public OfertaDto buscarOfertaID(
        @WebParam(name = "idOferta", targetNamespace = "")
        Long idOferta)
        throws SoapInputValidationException, SoapInstanceNotFoundException
    ;

    /**
     * 
     * @param palabrasClave
     * @return
     *     returns java.util.List<es.udc.ws.app.client.service.soap.wsdl.OfertaDto>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "buscarOfertaPclave", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarOfertaPclave")
    @ResponseWrapper(localName = "buscarOfertaPclaveResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarOfertaPclaveResponse")
    @Action(input = "http://soap.ws.udc.es/OfertaProvider/buscarOfertaPclaveRequest", output = "http://soap.ws.udc.es/OfertaProvider/buscarOfertaPclaveResponse")
    public List<OfertaDto> buscarOfertaPclave(
        @WebParam(name = "palabrasClave", targetNamespace = "")
        String palabrasClave);

    /**
     * 
     * @param usuario
     * @param idOferta
     * @param tarjeta
     * @return
     *     returns long
     * @throws SoapInstanceNotFoundException
     * @throws SoapFechaReservaExpiradaException
     * @throws SoapInputValidationException
     * @throws SoapOfertaYaReservadaException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "reservarOferta", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ReservarOferta")
    @ResponseWrapper(localName = "reservarOfertaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ReservarOfertaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertaProvider/reservarOfertaRequest", output = "http://soap.ws.udc.es/OfertaProvider/reservarOfertaResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/OfertaProvider/reservarOferta/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertaProvider/reservarOferta/Fault/SoapInstanceNotFoundException"),
        @FaultAction(className = SoapOfertaYaReservadaException.class, value = "http://soap.ws.udc.es/OfertaProvider/reservarOferta/Fault/SoapOfertaYaReservadaException"),
        @FaultAction(className = SoapFechaReservaExpiradaException.class, value = "http://soap.ws.udc.es/OfertaProvider/reservarOferta/Fault/SoapFechaReservaExpiradaException")
    })
    public long reservarOferta(
        @WebParam(name = "usuario", targetNamespace = "")
        String usuario,
        @WebParam(name = "tarjeta", targetNamespace = "")
        String tarjeta,
        @WebParam(name = "idOferta", targetNamespace = "")
        Long idOferta)
        throws SoapFechaReservaExpiradaException, SoapInputValidationException, SoapInstanceNotFoundException, SoapOfertaYaReservadaException
    ;

    /**
     * 
     * @param codigo
     * @throws SoapYaReclamadaException
     * @throws SoapInstanceNotFoundException
     * @throws SoapInputValidationException
     */
    @WebMethod
    @RequestWrapper(localName = "reclamarReserva", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ReclamarReserva")
    @ResponseWrapper(localName = "reclamarReservaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ReclamarReservaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertaProvider/reclamarReservaRequest", output = "http://soap.ws.udc.es/OfertaProvider/reclamarReservaResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/OfertaProvider/reclamarReserva/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertaProvider/reclamarReserva/Fault/SoapInstanceNotFoundException"),
        @FaultAction(className = SoapYaReclamadaException.class, value = "http://soap.ws.udc.es/OfertaProvider/reclamarReserva/Fault/SoapYaReclamadaException")
    })
    public void reclamarReserva(
        @WebParam(name = "codigo", targetNamespace = "")
        Long codigo)
        throws SoapInputValidationException, SoapInstanceNotFoundException, SoapYaReclamadaException
    ;

    /**
     * 
     * @param idOferta
     * @return
     *     returns java.util.List<es.udc.ws.app.client.service.soap.wsdl.ReservaDto>
     * @throws SoapInputValidationException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "buscarReservaIDOf", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarReservaIDOf")
    @ResponseWrapper(localName = "buscarReservaIDOfResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarReservaIDOfResponse")
    @Action(input = "http://soap.ws.udc.es/OfertaProvider/buscarReservaIDOfRequest", output = "http://soap.ws.udc.es/OfertaProvider/buscarReservaIDOfResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/OfertaProvider/buscarReservaIDOf/Fault/SoapInputValidationException")
    })
    public List<ReservaDto> buscarReservaIDOf(
        @WebParam(name = "idOferta", targetNamespace = "")
        Long idOferta)
        throws SoapInputValidationException
    ;

    /**
     * 
     * @param soloValidas
     * @param usuario
     * @return
     *     returns java.util.List<es.udc.ws.app.client.service.soap.wsdl.ReservaDto>
     * @throws SoapInputValidationException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "buscarReservaUsuario", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarReservaUsuario")
    @ResponseWrapper(localName = "buscarReservaUsuarioResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarReservaUsuarioResponse")
    @Action(input = "http://soap.ws.udc.es/OfertaProvider/buscarReservaUsuarioRequest", output = "http://soap.ws.udc.es/OfertaProvider/buscarReservaUsuarioResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/OfertaProvider/buscarReservaUsuario/Fault/SoapInputValidationException")
    })
    public List<ReservaDto> buscarReservaUsuario(
        @WebParam(name = "usuario", targetNamespace = "")
        String usuario,
        @WebParam(name = "soloValidas", targetNamespace = "")
        boolean soloValidas)
        throws SoapInputValidationException
    ;

    /**
     * 
     * @param usuario
     * @return
     *     returns java.util.List<es.udc.ws.app.client.service.soap.wsdl.MixtoDto>
     * @throws SoapInstanceNotFoundException
     * @throws SoapInputValidationException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "buscarOfertasUsuario", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarOfertasUsuario")
    @ResponseWrapper(localName = "buscarOfertasUsuarioResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarOfertasUsuarioResponse")
    @Action(input = "http://soap.ws.udc.es/OfertaProvider/buscarOfertasUsuarioRequest", output = "http://soap.ws.udc.es/OfertaProvider/buscarOfertasUsuarioResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/OfertaProvider/buscarOfertasUsuario/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertaProvider/buscarOfertasUsuario/Fault/SoapInstanceNotFoundException")
    })
    public List<MixtoDto> buscarOfertasUsuario(
        @WebParam(name = "usuario", targetNamespace = "")
        String usuario)
        throws SoapInputValidationException, SoapInstanceNotFoundException
    ;

}
