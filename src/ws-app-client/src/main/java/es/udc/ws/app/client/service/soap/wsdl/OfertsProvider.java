
package es.udc.ws.app.client.service.soap.wsdl;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "OfertsProvider", targetNamespace = "http://soap.ws.udc.es/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface OfertsProvider {


    /**
     * 
     * @param ofertaId
     * @return
     *     returns java.util.List<es.udc.ws.app.client.service.soap.wsdl.ReservaDto>
     * @throws SoapInstanceNotFoundException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "buscarReservasDeUnaOferta", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarReservasDeUnaOferta")
    @ResponseWrapper(localName = "buscarReservasDeUnaOfertaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarReservasDeUnaOfertaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertsProvider/buscarReservasDeUnaOfertaRequest", output = "http://soap.ws.udc.es/OfertsProvider/buscarReservasDeUnaOfertaResponse", fault = {
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertsProvider/buscarReservasDeUnaOferta/Fault/SoapInstanceNotFoundException")
    })
    public List<ReservaDto> buscarReservasDeUnaOferta(
        @WebParam(name = "ofertaId", targetNamespace = "")
        Long ofertaId)
        throws SoapInstanceNotFoundException
    ;

    /**
     * 
     * @param validas
     * @param email
     * @return
     *     returns java.util.List<es.udc.ws.app.client.service.soap.wsdl.ReservaDto>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "buscarReservasDeUnUsuario", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarReservasDeUnUsuario")
    @ResponseWrapper(localName = "buscarReservasDeUnUsuarioResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarReservasDeUnUsuarioResponse")
    @Action(input = "http://soap.ws.udc.es/OfertsProvider/buscarReservasDeUnUsuarioRequest", output = "http://soap.ws.udc.es/OfertsProvider/buscarReservasDeUnUsuarioResponse")
    public List<ReservaDto> buscarReservasDeUnUsuario(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "validas", targetNamespace = "")
        Boolean validas);

    /**
     * 
     * @param keywords
     * @return
     *     returns java.util.List<es.udc.ws.app.client.service.soap.wsdl.OfertaDto>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "buscarOfertas", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarOfertas")
    @ResponseWrapper(localName = "buscarOfertasResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarOfertasResponse")
    @Action(input = "http://soap.ws.udc.es/OfertsProvider/buscarOfertasRequest", output = "http://soap.ws.udc.es/OfertsProvider/buscarOfertasResponse")
    public List<OfertaDto> buscarOfertas(
        @WebParam(name = "keywords", targetNamespace = "")
        String keywords);

    /**
     * 
     * @param ofertaId
     * @param tarjeta
     * @param email
     * @return
     *     returns java.lang.Long
     * @throws SoapOfertaExpirationException
     * @throws SoapInstanceNotFoundException
     * @throws SoapOfertaReservedByUserException
     * @throws SoapOfertaInvalidaException
     * @throws SoapInputValidationException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "reservarOferta", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ReservarOferta")
    @ResponseWrapper(localName = "reservarOfertaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ReservarOfertaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertsProvider/reservarOfertaRequest", output = "http://soap.ws.udc.es/OfertsProvider/reservarOfertaResponse", fault = {
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertsProvider/reservarOferta/Fault/SoapInstanceNotFoundException"),
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/OfertsProvider/reservarOferta/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapOfertaInvalidaException.class, value = "http://soap.ws.udc.es/OfertsProvider/reservarOferta/Fault/SoapOfertaInvalidaException"),
        @FaultAction(className = SoapOfertaExpirationException.class, value = "http://soap.ws.udc.es/OfertsProvider/reservarOferta/Fault/SoapOfertaExpirationException"),
        @FaultAction(className = SoapOfertaReservedByUserException.class, value = "http://soap.ws.udc.es/OfertsProvider/reservarOferta/Fault/SoapOfertaReservedByUserException")
    })
    public Long reservarOferta(
        @WebParam(name = "ofertaId", targetNamespace = "")
        Long ofertaId,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "tarjeta", targetNamespace = "")
        String tarjeta)
        throws SoapInputValidationException, SoapInstanceNotFoundException, SoapOfertaExpirationException, SoapOfertaInvalidaException, SoapOfertaReservedByUserException
    ;

    /**
     * 
     * @param ofertaDto
     * @throws SoapPrecioDescontadoException
     * @throws SoapInstanceNotFoundException
     * @throws SoapFechaInvalidaException
     * @throws SoapInputValidationException
     */
    @WebMethod
    @RequestWrapper(localName = "actualizarOferta", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ActualizarOferta")
    @ResponseWrapper(localName = "actualizarOfertaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ActualizarOfertaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertsProvider/actualizarOfertaRequest", output = "http://soap.ws.udc.es/OfertsProvider/actualizarOfertaResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/OfertsProvider/actualizarOferta/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertsProvider/actualizarOferta/Fault/SoapInstanceNotFoundException"),
        @FaultAction(className = SoapPrecioDescontadoException.class, value = "http://soap.ws.udc.es/OfertsProvider/actualizarOferta/Fault/SoapPrecioDescontadoException"),
        @FaultAction(className = SoapFechaInvalidaException.class, value = "http://soap.ws.udc.es/OfertsProvider/actualizarOferta/Fault/SoapFechaInvalidaException")
    })
    public void actualizarOferta(
        @WebParam(name = "ofertaDto", targetNamespace = "")
        OfertaDto ofertaDto)
        throws SoapFechaInvalidaException, SoapInputValidationException, SoapInstanceNotFoundException, SoapPrecioDescontadoException
    ;

    /**
     * 
     * @param ofertaId
     * @return
     *     returns es.udc.ws.app.client.service.soap.wsdl.OfertaDto
     * @throws SoapInstanceNotFoundException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "buscarOferta", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarOferta")
    @ResponseWrapper(localName = "buscarOfertaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarOfertaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertsProvider/buscarOfertaRequest", output = "http://soap.ws.udc.es/OfertsProvider/buscarOfertaResponse", fault = {
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertsProvider/buscarOferta/Fault/SoapInstanceNotFoundException")
    })
    public OfertaDto buscarOferta(
        @WebParam(name = "ofertaId", targetNamespace = "")
        Long ofertaId)
        throws SoapInstanceNotFoundException
    ;

    /**
     * 
     * @param reservaId
     * @return
     *     returns es.udc.ws.app.client.service.soap.wsdl.ReservaDto
     * @throws SoapInstanceNotFoundException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "buscarReserva", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarReserva")
    @ResponseWrapper(localName = "buscarReservaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarReservaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertsProvider/buscarReservaRequest", output = "http://soap.ws.udc.es/OfertsProvider/buscarReservaResponse", fault = {
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertsProvider/buscarReserva/Fault/SoapInstanceNotFoundException")
    })
    public ReservaDto buscarReserva(
        @WebParam(name = "reservaId", targetNamespace = "")
        Long reservaId)
        throws SoapInstanceNotFoundException
    ;

    /**
     * 
     * @param codigo
     * @throws SoapInstanceNotFoundException
     * @throws SoapReservaExpirationException
     * @throws SoapReservaNoValidaException
     */
    @WebMethod
    @RequestWrapper(localName = "reclamarReserva", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ReclamarReserva")
    @ResponseWrapper(localName = "reclamarReservaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ReclamarReservaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertsProvider/reclamarReservaRequest", output = "http://soap.ws.udc.es/OfertsProvider/reclamarReservaResponse", fault = {
        @FaultAction(className = SoapReservaExpirationException.class, value = "http://soap.ws.udc.es/OfertsProvider/reclamarReserva/Fault/SoapReservaExpirationException"),
        @FaultAction(className = SoapReservaNoValidaException.class, value = "http://soap.ws.udc.es/OfertsProvider/reclamarReserva/Fault/SoapReservaNoValidaException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertsProvider/reclamarReserva/Fault/SoapInstanceNotFoundException")
    })
    public void reclamarReserva(
        @WebParam(name = "codigo", targetNamespace = "")
        int codigo)
        throws SoapInstanceNotFoundException, SoapReservaExpirationException, SoapReservaNoValidaException
    ;

    /**
     * 
     * @param ofertaDto
     * @return
     *     returns java.lang.Long
     * @throws SoapInputValidationException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "anadirOferta", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.AnadirOferta")
    @ResponseWrapper(localName = "anadirOfertaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.AnadirOfertaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertsProvider/anadirOfertaRequest", output = "http://soap.ws.udc.es/OfertsProvider/anadirOfertaResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/OfertsProvider/anadirOferta/Fault/SoapInputValidationException")
    })
    public Long anadirOferta(
        @WebParam(name = "ofertaDto", targetNamespace = "")
        OfertaDto ofertaDto)
        throws SoapInputValidationException
    ;

    /**
     * 
     * @param ofertaId
     * @throws SoapOfertaReservedException
     * @throws SoapInstanceNotFoundException
     */
    @WebMethod
    @RequestWrapper(localName = "eliminarOferta", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.EliminarOferta")
    @ResponseWrapper(localName = "eliminarOfertaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.EliminarOfertaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertsProvider/eliminarOfertaRequest", output = "http://soap.ws.udc.es/OfertsProvider/eliminarOfertaResponse", fault = {
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertsProvider/eliminarOferta/Fault/SoapInstanceNotFoundException"),
        @FaultAction(className = SoapOfertaReservedException.class, value = "http://soap.ws.udc.es/OfertsProvider/eliminarOferta/Fault/SoapOfertaReservedException")
    })
    public void eliminarOferta(
        @WebParam(name = "ofertaId", targetNamespace = "")
        Long ofertaId)
        throws SoapInstanceNotFoundException, SoapOfertaReservedException
    ;

    /**
     * 
     * @param ofertaId
     * @throws SoapPrecioDescontadoException
     * @throws SoapInstanceNotFoundException
     * @throws SoapOfertaInvalidaException
     * @throws SoapInputValidationException
     * @throws SoapFechaInvalidaException
     */
    @WebMethod
    @RequestWrapper(localName = "invalidarOferta", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.InvalidarOferta")
    @ResponseWrapper(localName = "invalidarOfertaResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.InvalidarOfertaResponse")
    @Action(input = "http://soap.ws.udc.es/OfertsProvider/invalidarOfertaRequest", output = "http://soap.ws.udc.es/OfertsProvider/invalidarOfertaResponse", fault = {
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/OfertsProvider/invalidarOferta/Fault/SoapInstanceNotFoundException"),
        @FaultAction(className = SoapPrecioDescontadoException.class, value = "http://soap.ws.udc.es/OfertsProvider/invalidarOferta/Fault/SoapPrecioDescontadoException"),
        @FaultAction(className = SoapFechaInvalidaException.class, value = "http://soap.ws.udc.es/OfertsProvider/invalidarOferta/Fault/SoapFechaInvalidaException"),
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/OfertsProvider/invalidarOferta/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapOfertaInvalidaException.class, value = "http://soap.ws.udc.es/OfertsProvider/invalidarOferta/Fault/SoapOfertaInvalidaException")
    })
    public void invalidarOferta(
        @WebParam(name = "ofertaId", targetNamespace = "")
        Long ofertaId)
        throws SoapFechaInvalidaException, SoapInputValidationException, SoapInstanceNotFoundException, SoapOfertaInvalidaException, SoapPrecioDescontadoException
    ;

    /**
     * 
     * @param email
     * @return
     *     returns java.util.List<es.udc.ws.app.client.service.soap.wsdl.OfertaReservadaDto>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "buscarOfertasReservadasDeUnUsuario", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarOfertasReservadasDeUnUsuario")
    @ResponseWrapper(localName = "buscarOfertasReservadasDeUnUsuarioResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.BuscarOfertasReservadasDeUnUsuarioResponse")
    @Action(input = "http://soap.ws.udc.es/OfertsProvider/buscarOfertasReservadasDeUnUsuarioRequest", output = "http://soap.ws.udc.es/OfertsProvider/buscarOfertasReservadasDeUnUsuarioResponse")
    public List<OfertaReservadaDto> buscarOfertasReservadasDeUnUsuario(
        @WebParam(name = "email", targetNamespace = "")
        String email);

}
